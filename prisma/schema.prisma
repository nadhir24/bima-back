generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  fullName     String
  phoneNumber  String        @unique
  email        String        @unique
  password     String
  createdAt    DateTime      @default(now())
  photoProfile String?
  carts        Cart[]
  customers    Customer[]
  invoices     Invoice[]     @relation("UserInvoices")
  payments     Payment[]
  userPassword UserPassword?
  userProfile  UserProfile?
  userRoles    UserRole[]

  @@map("users")
}

model Catalog {
  id           Int     @id @default(autoincrement())
  name         String
  slug         String  @unique
  category     String
  categorySlug String
  description  String
  isEnabled    Boolean
  image        String?
  productSlug  String
  carts        Cart[]  @relation("CatalogCarts")
  sizes        Size[]  @relation("CatalogSizes")

  @@map("catalogs")
}

model Size {
  id           Int           @id @default(autoincrement())
  size         String
  price        String
  qty          Int           @default(0)
  catalogId    Int
  carts        Cart[]        @relation("SizeCarts")
  invoiceItems InvoiceItem[]
  catalog      Catalog       @relation("CatalogSizes", fields: [catalogId], references: [id])

  @@map("sizes")
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int?     @map("user_id")
  guestId   String?  @map("guest_id")
  catalogId Int      @map("catalog_id")
  sizeId    Int      @map("size_id")
  quantity  Int
  createdAt DateTime @default(now()) @map("created_at")
  paymentId Int?     @map("payment_id")
  catalog   Catalog  @relation("CatalogCarts", fields: [catalogId], references: [id])
  payment   Payment? @relation(fields: [paymentId], references: [id])
  size      Size     @relation("SizeCarts", fields: [sizeId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId], map: "idx_cart_user_id")
  @@index([guestId], map: "idx_cart_guest_id")
  @@map("carts")
}

model Payment {
  id                Int      @id @default(autoincrement())
  userId            Int?     @map("user_id")
  amount            Float
  status            String
  createdAt         DateTime @default(now()) @map("created_at")
  failureReason     String?  @map("failure_reason")
  invoiceId         Int?     @unique @map("invoice_id")
  paymentMethod     String?  @map("payment_method")
  midtransPaymentId String?  @map("midtrans_payment_id")
  carts             Cart[]
  invoice           Invoice? @relation("InvoicePayment", fields: [invoiceId], references: [id])
  user              User?    @relation(fields: [userId], references: [id])
  refunds           Refund[]

  @@map("payments")
}

model UserProfile {
  birthDate DateTime?
  createdAt DateTime  @default(now())
  gender    String?
  id        Int       @id @default(autoincrement())
  updatedAt DateTime?
  userId    Int?      @unique
  addresses Address[]
  user      User?     @relation(fields: [userId], references: [id])

  @@index([id], map: "pkey_user_profiles")
  @@map("user_profiles")
}

model Address {
  id            Int          @id @default(autoincrement())
  label         String?
  street        String
  city          String
  state         String
  postalCode    String
  country       String?
  isDefault     Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime?
  userProfileId Int?
  userProfile   UserProfile? @relation(fields: [userProfileId], references: [id])

  @@map("addresses")
}

model Role {
  id        Int        @id @default(autoincrement()) @map("role_id")
  name      String?    @unique @map("role_name")
  userRoles UserRole[]

  @@index([id], map: "pkey_roles")
  @@map("roles")
}

model UserRole {
  userId Int
  roleId Int
  role   Role @relation(fields: [roleId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@id([userId, roleId])
  @@map("user_roles")
}

model UserPassword {
  id           Int     @id @default(autoincrement())
  userId       Int     @unique
  passwordHash String?
  passwordSalt String?
  user         User    @relation(fields: [userId], references: [id])

  @@map("user_password")
}

model PaymentWebhook {
  id              Int      @id @default(autoincrement())
  orderId         String   @map("order_id")
  transactionTime DateTime @map("transaction_time")
  status          String   @map("status")
  paymentType     String   @map("payment_type")
  grossAmount     Float    @map("gross_amount")
  signatureKey    String   @map("signature_key")
  createdAt       DateTime @default(now()) @map("created_at")

  @@index([orderId], map: "idx_webhook_order_id")
  @@map("payment_webhooks")
}

model Invoice {
  id                    Int           @id @default(autoincrement())
  status                String        @default("PENDING")
  amount                Float         @map("amount")
  currency              String        @default("IDR")
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")
  externalId            String?       @map("external_id")
  userId                Int?          @map("user_id")
  midtransOrderId       String?       @unique @map("midtrans_order_id")
  paymentId             Int?          @unique @map("payment_id")
  paymentMethod         String?       @map("payment_method")
  paymentStatus         String?       @map("payment_status")
  paymentUrl            String?       @map("payment_url")
  catalogId             Int?
  sizeId                Int?
  midtransInvoicePdfUrl String?       @map("midtrans_invoice_pdf_url")
  midtransInvoiceUrl    String?       @map("midtrans_invoice_url")
  shippingAddress       String?
  shippingCity          String?
  shippingCountryCode   String?       @default("IDN")
  shippingEmail         String?
  shippingFirstName     String?
  shippingLastName      String?
  shippingPhone         String?
  shippingPostalCode    String?
  shippingProvince      String?
  guestId               String?       @map("guest_id")
  items                 InvoiceItem[]
  user                  User?         @relation("UserInvoices", fields: [userId], references: [id])
  payment               Payment?      @relation("InvoicePayment")

  @@index([midtransOrderId], map: "idx_invoice_midtrans_id")
  @@index([userId], map: "idx_invoice_user_id")
  @@index([guestId], map: "idx_invoice_guest_id")
  @@map("invoices")
}

model InvoiceItem {
  id        Int     @id @default(autoincrement())
  invoiceId Int     @map("invoice_id")
  name      String
  quantity  Int
  price     Float
  currency  String
  catalogId Int?    @map("catalog_id")
  sizeId    Int?    @map("size_id")
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  size      Size?   @relation(fields: [sizeId], references: [id])

  @@map("invoice_items")
}

model Customer {
  id          Int      @id @default(autoincrement())
  userId      Int?     @map("user_id")
  email       String?
  phoneNumber String?  @map("phone_number")
  givenNames  String?  @map("given_names")
  surname     String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User?    @relation(fields: [userId], references: [id])

  @@index([userId], map: "idx_customer_user_id")
  @@map("customers")
}

model Refund {
  id        Int      @id @default(autoincrement())
  paymentId Int      @map("payment_id")
  status    String   @map("status")
  amount    Float    @map("amount")
  reason    String?  @map("reason")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  refundId  String   @unique @map("refund_id")
  payment   Payment  @relation(fields: [paymentId], references: [id])

  @@index([refundId], map: "idx_refund_id")
  @@map("refunds")
}
