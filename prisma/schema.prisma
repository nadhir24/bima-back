// Datasource and Generator
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User Model
model User {
  id           Int           @id @default(autoincrement())
  fullName     String
  phoneNumber  String        @unique
  email        String        @unique
  password     String
  createdAt    DateTime      @default(now())
  carts        Cart[]
  payments     Payment[]
  userProfile  UserProfile?
  userPassword UserPassword?
  userRoles    UserRole[]
  photoProfile String?
  customers    Customer[]
  invoices     Invoice[]     @relation("UserInvoices")

  @@map("users")
}

// Catalog Model
model Catalog {
  id           Int     @id @default(autoincrement())
  name         String
  slug         String  @unique
  category     String
  categorySlug String
  description  String
  isEnabled    Boolean
  image        String?
  sizes        Size[]  @relation("CatalogSizes")
  carts        Cart[]  @relation("CatalogCarts")
  productSlug  String

  @@map("catalogs")
}

// Size Model - Updated with qty field
model Size {
  id        Int     @id @default(autoincrement())
  size      String
  price     String
  qty       Int     @default(0)  // Added qty field for size-specific inventory
  catalog   Catalog @relation("CatalogSizes", fields: [catalogId], references: [id])
  catalogId Int
  carts     Cart[]  @relation("SizeCarts")
  invoiceItems InvoiceItem[] // Item invoice yang menggunakan ukuran ini

  @@map("sizes")
}

// Cart Model
model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int?     @map("user_id")
  user      User?    @relation(fields: [userId], references: [id])
  guestId   String?  @map("guest_id")
  catalogId Int      @map("catalog_id")
  catalog   Catalog  @relation("CatalogCarts", fields: [catalogId], references: [id])
  sizeId    Int      @map("size_id")
  size      Size     @relation("SizeCarts", fields: [sizeId], references: [id])
  quantity  Int
  createdAt DateTime @default(now()) @map("created_at")
  paymentId Int?     @map("payment_id")
  payment   Payment? @relation(fields: [paymentId], references: [id])

  @@index([userId], name: "idx_cart_user_id")
  @@index([guestId], name: "idx_cart_guest_id")
  @@map("carts")
}

// Payment Model
model Payment {
  id                Int      @id @default(autoincrement())
  userId            Int?     @map("user_id")
  user              User?    @relation(fields: [userId], references: [id])
  amount            Float
  status            String
  createdAt         DateTime @default(now()) @map("created_at")
  carts             Cart[]
  midtransPaymentId String?  @map("midtrans_payment_id")
  paymentMethod     String?  @map("payment_method")
  failureReason     String?  @map("failure_reason")
  invoice           Invoice? @relation("InvoicePayment", fields: [invoiceId], references: [id])
  invoiceId         Int?     @unique @map("invoice_id")
  refunds           Refund[]

  @@map("payments")
}

// UserProfile Model
model UserProfile {
  id        Int       @id @default(autoincrement()) @map("uspro_id")
  birthDate DateTime? @map("uspro_birth_date")
  gender    String?   @map("uspro_gender")
  addressId Int?      @map("uspro_addr_id")
  userId    Int?      @unique @map("uspro_user_id")
  address   Address?  @relation(fields: [addressId], references: [id])
  user      User?     @relation(fields: [userId], references: [id])

  @@index([id], name: "pkey_user_profiles")
  @@map("user_profiles")
}

// Address Model
model Address {
  id           Int           @id @default(autoincrement())
  street       String
  city         String
  state        String
  postalCode   String
  country      String
  userProfiles UserProfile[]

  @@map("address")
}

// Role Model
model Role {
  id        Int        @id @default(autoincrement()) @map("role_id")
  name      String?    @unique @map("role_name")
  userRoles UserRole[]

  @@index([id], name: "pkey_roles")
  @@map("roles")
}

// UserRole Model
model UserRole {
  userId Int
  roleId Int
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@map("user_roles")
}

// UserPassword Model
model UserPassword {
  id           Int     @id @default(autoincrement())
  userId       Int     @unique
  passwordHash String?
  passwordSalt String?
  user         User    @relation(fields: [userId], references: [id])

  @@map("user_password")
}

// PaymentWebhook Model
model PaymentWebhook {
  id              Int      @id @default(autoincrement())
  orderId         String   @map("order_id")
  transactionTime DateTime @map("transaction_time")
  status          String   @map("status")
  paymentType     String   @map("payment_type")
  grossAmount     Float    @map("gross_amount")
  signatureKey    String   @map("signature_key")
  createdAt       DateTime @default(now()) @map("created_at")

  @@index([orderId], name: "idx_webhook_order_id")
  @@map("payment_webhooks")
}

// Invoice Model
model Invoice {
  id              Int           @id @default(autoincrement())
  midtransOrderId String?       @unique @map("midtrans_order_id")
  externalId      String?       @map("external_id")
  status          String        @default("PENDING")
  amount          Float         @map("amount")
  currency        String        @default("IDR")
  paymentUrl      String?       @map("payment_url")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  items           InvoiceItem[]
  userId          Int?          @map("user_id")
  user            User?         @relation("UserInvoices", fields: [userId], references: [id])
  paymentMethod   String?       @map("payment_method")
  paymentStatus   String?       @map("payment_status")
  payment         Payment?      @relation("InvoicePayment")
  paymentId       Int?          @unique @map("payment_id")
  // Add these fields to track which items need inventory updates
  catalogId Int?
  sizeId    Int?
  @@index([midtransOrderId], name: "idx_invoice_midtrans_id")
  @@index([userId], name: "idx_invoice_user_id")
  @@map("invoices")
}

// InvoiceItem Model
model InvoiceItem {
  id        Int     @id @default(autoincrement())
  invoiceId Int     @map("invoice_id")
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  name      String
  quantity  Int
  price     Float
  currency  String
  catalogId Int?    @map("catalog_id")
  sizeId    Int?    @map("size_id")
  size      Size?   @relation(fields: [sizeId], references: [id])

  @@map("invoice_items")
}

// Customer Model
model Customer {
  id          Int      @id @default(autoincrement())
  userId      Int?     @map("user_id")
  user        User?    @relation(fields: [userId], references: [id])
  email       String?
  phoneNumber String?  @map("phone_number")
  givenNames  String?  @map("given_names")
  surname     String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([userId], name: "idx_customer_user_id")
  @@map("customers")
}

// Refund Model
model Refund {
  id        Int      @id @default(autoincrement())
  paymentId Int      @map("payment_id")
  payment   Payment  @relation(fields: [paymentId], references: [id])
  refundId  String   @unique @map("refund_id")
  status    String   @map("status")
  amount    Float    @map("amount")
  reason    String?  @map("reason")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([refundId], name: "idx_refund_id")
  @@map("refunds")
}